import{f as i,g as a}from"./icons-C5wB5cT0.js";var u=new Map,h=new WeakMap;function l(t){return t??{keyframes:[],options:{duration:0}}}function o(t,e){return e.toLowerCase()==="rtl"?{keyframes:t.rtlKeyframes||t.keyframes,options:t.options}:t}function d(t,e){u.set(t,l(e))}function m(t,e,n){const s=h.get(t);if(s!=null&&s[e])return o(s[e],n.dir);const r=u.get(e);return r?o(r,n.dir):{keyframes:[],options:{duration:0}}}function g(t,e){return new Promise(n=>{function s(r){r.target===t&&(t.removeEventListener(e,s),n())}t.addEventListener(e,s)})}function p(t,e,n){return new Promise(s=>{if((n==null?void 0:n.duration)===1/0)throw new Error("Promise-based animations must be finite.");const r=t.animate(e,i(a({},n),{duration:f()?0:n.duration}));r.addEventListener("cancel",s,{once:!0}),r.addEventListener("finish",s,{once:!0})})}function E(t){return t=t.toString().toLowerCase(),t.indexOf("ms")>-1?parseFloat(t):t.indexOf("s")>-1?parseFloat(t)*1e3:parseFloat(t)}function f(){return window.matchMedia("(prefers-reduced-motion: reduce)").matches}function w(t){return Promise.all(t.getAnimations().map(e=>new Promise(n=>{e.cancel(),requestAnimationFrame(n)})))}function v(t,e){return t.map(n=>i(a({},n),{height:n.height==="auto"?`${e}px`:n.height}))}var A=class{constructor(t,...e){this.slotNames=[],this.handleSlotChange=n=>{const s=n.target;(this.slotNames.includes("[default]")&&!s.name||s.name&&this.slotNames.includes(s.name))&&this.host.requestUpdate()},(this.host=t).addController(this),this.slotNames=e}hasDefaultSlot(){return[...this.host.childNodes].some(t=>{if(t.nodeType===t.TEXT_NODE&&t.textContent.trim()!=="")return!0;if(t.nodeType===t.ELEMENT_NODE){const e=t;if(e.tagName.toLowerCase()==="sl-visually-hidden")return!1;if(!e.hasAttribute("slot"))return!0}return!1})}hasNamedSlot(t){return this.host.querySelector(`:scope > [slot="${t}"]`)!==null}test(t){return t==="[default]"?this.hasDefaultSlot():this.hasNamedSlot(t)}hostConnected(){this.host.shadowRoot.addEventListener("slotchange",this.handleSlotChange)}hostDisconnected(){this.host.shadowRoot.removeEventListener("slotchange",this.handleSlotChange)}};function C(t){if(!t)return"";const e=t.assignedNodes({flatten:!0});let n="";return[...e].forEach(s=>{s.nodeType===Node.TEXT_NODE&&(n+=s.textContent)}),n}export{A as H,w as a,p as b,f as c,v as d,C as e,m as g,E as p,d as s,g as w};
